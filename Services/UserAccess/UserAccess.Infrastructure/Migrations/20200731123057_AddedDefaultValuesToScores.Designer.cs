// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserAccess.Infrastructure.Persistence;

namespace UserAccess.Infrastructure.Migrations
{
    [DbContext(typeof(UserAccessContext))]
    [Migration("20200731123057_AddedDefaultValuesToScores")]
    partial class AddedDefaultValuesToScores
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Base.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InboxMessages","Users");
                });

            modelBuilder.Entity("Base.Infrastructure.InternalCommands.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InternalCommands","Users");
                });

            modelBuilder.Entity("Base.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages","Users");
                });

            modelBuilder.Entity("UserAccess.Domain.UserRegistrations.UserRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("_confirmedDate")
                        .HasColumnName("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("_email")
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_firstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_lastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_login")
                        .HasColumnName("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_password")
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("_registerDate")
                        .HasColumnName("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserRegistrations","Users");
                });

            modelBuilder.Entity("UserAccess.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_email")
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_firstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("_isActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("_lastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_login")
                        .HasColumnName("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_password")
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("_picture")
                        .HasColumnName("Picture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users","Users");
                });

            modelBuilder.Entity("UserAccess.Domain.UserRegistrations.UserRegistration", b =>
                {
                    b.OwnsOne("UserAccess.Domain.UserRegistrations.UserRegistrationStatus", "_status", b1 =>
                        {
                            b1.Property<Guid>("UserRegistrationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnName("StatusCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserRegistrationId");

                            b1.ToTable("UserRegistrations");

                            b1.WithOwner()
                                .HasForeignKey("UserRegistrationId");
                        });
                });

            modelBuilder.Entity("UserAccess.Domain.Users.User", b =>
                {
                    b.OwnsOne("UserAccess.Domain.Users.Scores", "_scores", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Banter")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("BanterScore")
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<int>("Comment")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CommentScore")
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("UserAccess.Domain.Users.UserRole", "_roles", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnName("RoleCode")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("UserId", "Value");

                            b1.ToTable("UserRoles","Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
