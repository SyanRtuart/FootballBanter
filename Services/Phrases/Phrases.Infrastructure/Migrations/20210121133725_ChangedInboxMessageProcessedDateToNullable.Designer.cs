// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Phrases.Infrastructure.Persistence;

namespace Phrases.Infrastructure.Migrations
{
    [DbContext(typeof(PhraseContext))]
    [Migration("20210121133725_ChangedInboxMessageProcessedDateToNullable")]
    partial class ChangedInboxMessageProcessedDateToNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Base.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InboxMessages","Phrase");
                });

            modelBuilder.Entity("Base.Infrastructure.InternalCommands.InternalCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnqueueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InternalCommands","Phrase");
                });

            modelBuilder.Entity("Base.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages","Phrase");
                });

            modelBuilder.Entity("Phrases.Domain.Members.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_email")
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_firstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_lastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_login")
                        .HasColumnName("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("_picture")
                        .HasColumnName("Picture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Members","Phrase");
                });

            modelBuilder.Entity("Phrases.Domain.Phrase.Phrase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_createdByUserId")
                        .HasColumnName("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("_dateCreated")
                        .HasColumnName("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("_dateDeleted")
                        .HasColumnName("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("_deletedByUserId")
                        .HasColumnName("DeletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("_matchId")
                        .HasColumnName("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("_positive")
                        .HasColumnName("Positive")
                        .HasColumnType("bit");

                    b.Property<int>("_score")
                        .HasColumnName("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("_teamId")
                        .HasColumnName("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Phrases","Phrase");
                });

            modelBuilder.Entity("Phrases.Domain.Members.Member", b =>
                {
                    b.OwnsOne("Phrases.Domain.Members.Scores", "_scores", b1 =>
                        {
                            b1.Property<Guid>("MemberId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Banter")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("BanterScore")
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<int>("Comment")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("CommentScore")
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.HasKey("MemberId");

                            b1.ToTable("Members");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });
                });

            modelBuilder.Entity("Phrases.Domain.Phrase.Phrase", b =>
                {
                    b.OwnsMany("Phrases.Domain.Phrase.PhraseVoteHistory", "_phraseVoteHistory", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PhraseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("_score")
                                .HasColumnName("Score")
                                .HasColumnType("int");

                            b1.Property<DateTime>("_utcDateDeleted")
                                .HasColumnName("DateDeleted")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("_utcDateVoted")
                                .HasColumnName("DateVoted")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id");

                            b1.HasIndex("PhraseId");

                            b1.ToTable("PhraseVoteHistory","Phrase");

                            b1.WithOwner()
                                .HasForeignKey("PhraseId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
